<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>SVG Freehand Drawing</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; text-align: center; }
    h2 { margin-bottom: 10px; }
    svg { border: 1px solid #333; width: 600px; height: 400px; background: #f9f9f9; cursor: crosshair; }
    .toolbar { margin-bottom: 10px; }
  </style>
</head>
<body>
  <h2>Draw Here</h2>
  <div class="toolbar">
    <label for="strokeColor">Line Color: </label>
    <input type="color" id="strokeColor" value="#000000">

    <button id="clear">Clear</button>
    <button id="undo">Undo</button>
    <button id="redo">Redo</button>
  </div>

  <svg id="canvas" xmlns="http://www.w3.org/2000/svg">
    <g id="drawLayer"></g>
  </svg>

  <script>
    const svg = document.getElementById('canvas');
    const layer = document.getElementById('drawLayer');
    const strokePicker = document.getElementById('strokeColor');
    let drawing = false;
    let path = null;
    let points = [];

    const undoStack = [];
    const redoStack = [];

    document.getElementById('clear').addEventListener('click', () => {
      layer.innerHTML = '';
      undoStack.length = 0;
      redoStack.length = 0;
    });

    document.getElementById('undo').addEventListener('click', () => {
      if (layer.lastChild) {
        const last = layer.lastChild;
        redoStack.push(last);
        layer.removeChild(last);
      }
    });

    document.getElementById('redo').addEventListener('click', () => {
      if (redoStack.length > 0) {
        const shape = redoStack.pop();
        layer.appendChild(shape);
      }
    });

    function getPoint(evt) {
      const rect = svg.getBoundingClientRect();
      return { x: evt.clientX - rect.left, y: evt.clientY - rect.top };
    }

    svg.addEventListener('mousedown', e => {
      drawing = true;
      points = [];
      const p = getPoint(e);
      points.push(p);

      path = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
      path.setAttribute('points', `${p.x},${p.y}`);
      path.setAttribute('stroke', strokePicker.value);
      path.setAttribute('fill', 'none');
      path.setAttribute('stroke-width', '2');
      layer.appendChild(path);
    });

    svg.addEventListener('mousemove', e => {
      if (!drawing || !path) return;
      const p = getPoint(e);
      points.push(p);
      const ptsStr = points.map(pt => `${pt.x},${pt.y}`).join(' ');
      path.setAttribute('points', ptsStr);
    });

    window.addEventListener('mouseup', () => {
      if (drawing && path) {
        undoStack.push(path);
        redoStack.length = 0; // clear redo after new action
      }
      drawing = false;
      path = null;
      points = [];
    });
  </script>
</body>
</html>
